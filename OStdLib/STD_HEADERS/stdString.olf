#include stdTypes.olf

func:int stringSize(char~ str){
    var:int index = 0;
    var:int size = 0;

    var:bool active = true;

    while(active){
        
        if(str[index] ? '\0'){
            @active = false;
        }else{
            @index = index + 1;
            @size = size + 1;
        }
    }

    return(size);
}

func:int strToInteger(char~ str){

    var:int result = 0;

    var:int multiplier = 10;

    var:int start = stringSize(str);

    var:int index = 0;

    while(start > 0){
        
        var:int newElem = int(str[start - 1] - '0');
        
        if(index ? 0){
            @result = newElem;
        }else{
            @result = result + newElem * multiplier;
            @multiplier = multiplier * 10;
        }       

        @index = index + 1;
        @start = start - 1;
    }

    return(result);
}

func reverseString(char~ str){
    var:int last = stringSize(str) - 1;
    var:int first = 0;

    while(last > first){
        var:char buf1 = str[first];
        var:char buf2 = str[last];

        @str[last] = buf1;
        @str[first] = buf2;

        @first = first + 1;
        @last = last - 1;
    }
}

func integerToString(int source, char~ str, int maxSize){

    var:int index = 0;

    var:int remind = source;

    while(index < maxSize - 1 & remind > 0){
        var:int newElement = remind % 10;

        @str[index] = char(newElement) + '0';

        @index = index + 1;
        @remind = remind / 10;
    }

    @str[index] = '\0';

    reverseString(str);
}

func:bool compareString(char~ str1, char~ str2){

    var:int str1Size = stringSize(str1);
    var:int str2Size = stringSize(str2);

    if(str1Size ? str2Size){
        var:int index = 0;

        while(index < str1Size){
            var:bool isOnThatIndexEqual = str1[index] ? str2[index];

            if(isOnThatIndexEqual ? false){
                return(false);
            }

            @index = index +  1;
        }

    }else{
        return(false);
    }

    return(true);
}

func:RPChar strToCstr(char~ str){
    var:int size = stringSize(str);
    var:char~ allocSpace = malloc(char~, size + 1);
    var:int index = 0;
    var:RPChar realStr = [realStr initRPChar(allocSpace)];

    while(index < size){
        [realStr set(str[index])];

        @index += 1;
        @realStr = realStr + 1;
    }

    [realStr set('\0')];
    @realStr = [realStr initRPChar(allocSpace)];
    return(realStr);
}