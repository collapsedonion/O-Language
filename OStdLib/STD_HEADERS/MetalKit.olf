#include AppKit.olf
#include stdGeometry.olf
#include MetalColorFormats.olf
#include packedString.olf
#include packages.olf

enum {
    PrimitiveTypePoint = 0,
    PrimitiveTypeLine = 1,
    PrimitiveTypeLineStrip = 2,
    PrimitiveTypeTriangle = 3,
    PrimitiveTypeTriangleStrip = 4
}

struct:Drawable{

}

struct:CommandBuffer{
    extern:func presentDrawable(Drawable drawable);
    extern:func commitCommandBuffer();
}

struct:CommandQueue{
    extern:func:CommandBuffer getCommandBuffer();
}

struct:Buffer{
    extern:func copyPArrayToBuffer(PArray pArray);
}


struct:MTLFunction{

}

struct:MTLLib{
    extern:func:MTLFunction getMTLFunction(PChar8~ pPStr);
}

struct:RenderPipelineDescriptor{
    extern:func setPipelineVertexFunction(MTLFunction function);
    extern:func setPipelineFragmentFunction(MTLFunction function);
    extern:func setPipelineLabel(PChar8~ pPStr);
    extern:func setPipelinePixelFormat(int pixelFormat);
}

struct:PipelineState{

}

struct:Device{
    extern:func:MTLLib initMTLLibWithFile(PChar8~ pPStr);
    extern:func:PipelineState initRenderPipelineState(RenderPipelineDescriptor rpd);
    extern:func:View initMTView(Rect rect);
    extern:func:Buffer initMTLBuffer(int size);
    extern:func:CommandQueue createNewCommandQueue();
}

struct:RenderPassDescriptor{

}

struct:RenderCommandEncoder{
    extern:func setEncoderVertexBuffer(Buffer buffer, int offset, int atIndex);
    extern:func setEncoderPipelineState(PipelineState ps);
    extern:func encoderDrawPrimitives(int type, int offset, int count);
    extern:func endEncoding();
}

extern:func:Device getSystemMetalDevice();

extern:func setViewColorPixelFormat(View view, int format);

extern:func setViewClearColor(View view, float r, float g, float b, float a);

extern:func:RenderPassDescriptor getCurrentRenderPassDescriptor(View view);

extern:func:RenderCommandEncoder getRenderCommandEncoder(CommandBuffer commandBuffer, RenderPassDescriptor renderPassDescriptor);

extern:func:Drawable getCurrentDrawable(View view);

extern:func:RenderPipelineDescriptor initRenderPipelineDescriptor();