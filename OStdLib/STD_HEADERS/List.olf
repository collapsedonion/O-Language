#include DynamicArray.olf


[universal [def T]];
struct:List{
    DynamicArray[T] _content;
    int _size;
    int _count;
    
    init(){
        @me[_size] = 10;
        @me[_count] = 0;
        @me[_content] = [[me[_content] alloc()] init(me[_size])];
        return(me);
    }
    
    [method [void Copy(List[T] source)]]{
        @me[_size] = source[_size];
        @me[_count] = source[_count];
        
        [me[_content] copy(source[_content])];
    }
    
    [method [int Count()]]{
        return(me[_count]);
    }
    
    [method [void Add(T new_element)]]{
        if(me[_count] + 1 > me[_size]){
            @me[_size] += 10;
            [me[_content] resize(me[_size])];
        }
        
        [me[_content] set(me[_count], new_element)];
        @me[_count] += 1;
    }
    
    [method [void Merge(List[T] merging)]]{
    
        var:int counter = 0;
        var:int merging_size = [merging Count()];
        
        while(counter < merging_size){
            var:T new_e = [merging get(counter)];
            [me Add(new_e)];
            @counter += 1;
        }
    }
    
    [method [T Last()]]{
        return([me get(me[_count] - 1)]);
    }
    
    [method [void set(int id, T element)]]{
        if(id < me[_count]){
            [me[_content] set(id, element)];
        }
    }
    
    [method [T get(int id)]]{
        if(id < me[_count]){
            return([me[_content] get(id)]);
        }
        return(T(0));
    }
    
    [method [T Pick()]]{
        if(me[_count] ? 0){
            return(T(0));
        }
    
        var:T to_ret = [me get(me[_count] - 1)];
        @me[_count] -= 1;
        if(me[_size] - me[_count] > 10){
            @me[_size] -= 10;
            [me[_content] resize(me[_size])];
        }
        
        return(to_ret);
    }
}
