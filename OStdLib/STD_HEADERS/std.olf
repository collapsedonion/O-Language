extern:func:bool operator "?" (char a, char b);
extern:func:bool operator "|" (bool a, bool b);
extern:func:bool operator "?" (bool a, bool b);
extern:func:bool operator "&" (bool a, bool b);
extern:func:int operator "%" (int a, int b);
extern:func:int operator "|" (int a, int b);
extern:func:char operator "-" (char a, char b);
extern:func:char operator "+" (char a, char b);
extern:func:float operator "+" (float a, float b);
extern:func:float operator "-" (float a, float b);
extern:func:float operator "*" (float a, float b);
extern:func:float operator "/" (float a, float b);
extern:func:bool operator "<" (float a, float b);
extern:func:bool operator ">" (float a, float b);
extern:func:bool operator "?" (float a, float b);
extern:func:bool operator ">" (int a, int b);
extern:func:bool operator "<" (int a, int b);
extern:func:bool operator "?" (int a, int b);
extern:func:int operator "+" (int a, int b);
extern:func:int operator "-" (int a, int b);
extern:func:int operator "*" (int a, int b);
extern:func:int operator "/" (int a, int b);
extern:func realloc(void~ pMemory, int size);
extern:func:int mSize(void~ pMemory);
extern:func:int getSysId();

enum{
	MACOS_SYS_ID = 0;
}

func operator "+=" (int~ a, int b){
    a = ~a + b;
}

func operator "-=" (int~ a, int b){
    a = ~a - b;
}

func operator "*=" (int~ a, int b){
    a = ~a * b;
}

func operator "/=" (int~ a, int b){
    a = ~a / b;
}

func operator "%=" (int~ a, int b){
    a = ~a % b;
}

func operator "&=" (bool~ a, bool b){
    a = ~a & b;
}

func operator "|=" (bool~ a, bool b){
    a = ~a | b;
}

func operator "+=" (float~ a, float b){
    a = ~a + b;
}

func operator "-=" (float~ a, float b){
    a = ~a - b;
}

func operator "*=" (float~ a, float b){
    a = ~a * b;
}

func operator "/=" (float~ a, float b){
    a = ~a / b;
}

extern:func:int clock();

extern:func:float getTime();

struct:RPointer{

};

extern:func:RPointer getRPointer(void~ pointer);
extern:func setRPointerData(RPointer rp, int size, int data);
extern:func:int getRPointerContent(RPointer rp, int size);
extern:func:void~ getRelativePointer(RPointer rp);

template:For{
    init;

    while(condition){
        body;
        iterationEnd;
    }
}

#include dynamic_lib.olf
#include stdString.olf
#include stdTypes.olf

global:DynamicLib c_std_lib_handler;

func initC_std(){
    var:char~ name = "";
    var:void~ real_name;
    var:RPChar cName = strToCstr(name);
    
    @c_std_lib_handler = openDL(cName);
    @real_name = getRelativePointer(RPointer(cName));
    free(real_name);
    free(name);
}

initC_std();