extern:func packSend(int~ dest, int source, int index, int length);
extern:func:int packExtract(int source, int index, int length);

struct:PackageIndexSmartCounter{
    int packageGlobalIndex;
    int packageLocalIndex;
    int base;
}

func operator "+" (PackageIndexSmartCounter counter, int incWith){
    var:int newLocalIndex = counter[packageLocalIndex] + incWith;
    var:int addToGlobal = newLocalIndex / (64 / counter[base]);
    counter[packageGlobalIndex] = counter[packageGlobalIndex] + addToGlobal;
    counter[packageLocalIndex] = newLocalIndex % (64 / counter[base]);
}

struct:PBool64{
}

struct:PFloat2{
}

struct:PInt2{
}

struct:PChar8{
}

func sendPBool64(PBool64~ dest, bool source, int index){
    packSend(int~(dest), int(source), index, 1);
}

func sendPFloat2(PFloat2~ dest, float source, int index){
    packSend(int~(dest), int(source), index, 32);
}

func sendPInt2(PInt2~ dest, int source, int index){
    packSend(int~(dest), int(source), index, 32);
}

func sendPChar8(PChar8~ dest, char source, int index){
    packSend(int~(dest), int(source), index, 8);
}

func:bool extractPBool64(PBool64 source, int index){
    return(bool(packExtract(int(source), index, 1)));
}

func:float extractPFloat2(PFloat2 source, int index){
    return(float(packExtract(int(source), index, 32)));
}

func:int extractPInt2(PInt2 source, int index){
    return(int(packExtract(int(source), index, 32)));
}

func:char extractPChar8(PChar8 source, int index){
    return(char(packExtract(int(source), index, 8)));
}

struct:PArray{
    void~ content;
    int base;
    int size;
}

func:PArray allocPArray(int size, int base){
    var:PArray toRet;
    var:int maxSize = size / (64 / base);
    if(((size % (64 / base)) ? 0) ? false){
        maxSize = maxSize + 1;
    }
    toRet[size] = size;
    toRet[base] = base;
    toRet[content] = malloc(void~, maxSize);
    return(toRet);
}

func:int operator "[]" (PArray pPArray, int index){
    var:PackageIndexSmartCounter pisc;
    pisc[base] = pPArray[base];
    pisc + index;
    var:void~ content = pPArray[content];
    var:int pElement = int(content[pisc[packageGlobalIndex]]);
    var:int toRet = packExtract(pElement, pisc[packageLocalIndex], pPArray[base]);
    free(pisc);
    return(toRet);
}

func setPArrayElement(PArray pPArray, int index, int data){
    var:PackageIndexSmartCounter pisc;
    pisc[base] = pPArray[base];
    pisc + index;
    var:void~ content = pPArray[content];
    var:int pElement = int(content[pisc[packageGlobalIndex]]);
    packSend(@pElement, data, pisc[packageLocalIndex], pPArray[base]);
    (int~(content))[pisc[packageGlobalIndex]] = pElement;
    free(pisc);
}

func copyArrayToPArray(PArray pPArray, void~ pArray, int copySize){
    var:int index = 0;

    while(index < copySize){
        setPArrayElement(pPArray, index, int(pArray[index]));
        index = index + 1;
    }
}